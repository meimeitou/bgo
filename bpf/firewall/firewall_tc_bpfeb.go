// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package firewall

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type firewall_tcConnTrack struct {
	_                structs.HostLayout
	ClientIp         uint32
	ClientPort       uint16
	Pad1             uint16
	OriginalDestIp   uint32
	OriginalDestPort uint16
	Pad2             uint16
	TargetIp         uint32
	TargetPort       uint16
	Pad3             uint16
	Timestamp        uint64
}

type firewall_tcDnatRule struct {
	_            structs.HostLayout
	OriginalIp   uint32
	OriginalPort uint16
	Pad1         uint16
	TargetIp     uint32
	TargetPort   uint16
	Protocol     uint8
	Enabled      uint8
}

type firewall_tcFirewallTcStats struct {
	_              structs.HostLayout
	TotalPackets   uint64
	AllowedPackets uint64
	DeniedPackets  uint64
	IngressPackets uint64
	EgressPackets  uint64
}

type firewall_tcTcRule struct {
	_         structs.HostLayout
	IpStart   uint32
	IpEnd     uint32
	Port      uint16
	Protocol  uint8
	RuleType  uint8
	Action    uint8
	Direction uint8
	Reserved  [2]uint8
}

// loadFirewall_tc returns the embedded CollectionSpec for firewall_tc.
func loadFirewall_tc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Firewall_tcBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load firewall_tc: %w", err)
	}

	return spec, err
}

// loadFirewall_tcObjects loads firewall_tc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*firewall_tcObjects
//	*firewall_tcPrograms
//	*firewall_tcMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFirewall_tcObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFirewall_tc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// firewall_tcSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewall_tcSpecs struct {
	firewall_tcProgramSpecs
	firewall_tcMapSpecs
	firewall_tcVariableSpecs
}

// firewall_tcProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewall_tcProgramSpecs struct {
	TcEgressFilter  *ebpf.ProgramSpec `ebpf:"tc_egress_filter"`
	TcIngressFilter *ebpf.ProgramSpec `ebpf:"tc_ingress_filter"`
}

// firewall_tcMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewall_tcMapSpecs struct {
	ConnReverseMap          *ebpf.MapSpec `ebpf:"conn_reverse_map"`
	ConnTrackMap            *ebpf.MapSpec `ebpf:"conn_track_map"`
	DebugCounters           *ebpf.MapSpec `ebpf:"debug_counters"`
	DebugMap                *ebpf.MapSpec `ebpf:"debug_map"`
	LvsDnatMap              *ebpf.MapSpec `ebpf:"lvs_dnat_map"`
	TcEgressBlacklist       *ebpf.MapSpec `ebpf:"tc_egress_blacklist"`
	TcEgressBlacklistCount  *ebpf.MapSpec `ebpf:"tc_egress_blacklist_count"`
	TcEgressWhitelist       *ebpf.MapSpec `ebpf:"tc_egress_whitelist"`
	TcEgressWhitelistCount  *ebpf.MapSpec `ebpf:"tc_egress_whitelist_count"`
	TcIngressBlacklist      *ebpf.MapSpec `ebpf:"tc_ingress_blacklist"`
	TcIngressBlacklistCount *ebpf.MapSpec `ebpf:"tc_ingress_blacklist_count"`
	TcIngressWhitelist      *ebpf.MapSpec `ebpf:"tc_ingress_whitelist"`
	TcIngressWhitelistCount *ebpf.MapSpec `ebpf:"tc_ingress_whitelist_count"`
	TcStatsMap              *ebpf.MapSpec `ebpf:"tc_stats_map"`
}

// firewall_tcVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewall_tcVariableSpecs struct {
}

// firewall_tcObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFirewall_tcObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewall_tcObjects struct {
	firewall_tcPrograms
	firewall_tcMaps
	firewall_tcVariables
}

func (o *firewall_tcObjects) Close() error {
	return _Firewall_tcClose(
		&o.firewall_tcPrograms,
		&o.firewall_tcMaps,
	)
}

// firewall_tcMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFirewall_tcObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewall_tcMaps struct {
	ConnReverseMap          *ebpf.Map `ebpf:"conn_reverse_map"`
	ConnTrackMap            *ebpf.Map `ebpf:"conn_track_map"`
	DebugCounters           *ebpf.Map `ebpf:"debug_counters"`
	DebugMap                *ebpf.Map `ebpf:"debug_map"`
	LvsDnatMap              *ebpf.Map `ebpf:"lvs_dnat_map"`
	TcEgressBlacklist       *ebpf.Map `ebpf:"tc_egress_blacklist"`
	TcEgressBlacklistCount  *ebpf.Map `ebpf:"tc_egress_blacklist_count"`
	TcEgressWhitelist       *ebpf.Map `ebpf:"tc_egress_whitelist"`
	TcEgressWhitelistCount  *ebpf.Map `ebpf:"tc_egress_whitelist_count"`
	TcIngressBlacklist      *ebpf.Map `ebpf:"tc_ingress_blacklist"`
	TcIngressBlacklistCount *ebpf.Map `ebpf:"tc_ingress_blacklist_count"`
	TcIngressWhitelist      *ebpf.Map `ebpf:"tc_ingress_whitelist"`
	TcIngressWhitelistCount *ebpf.Map `ebpf:"tc_ingress_whitelist_count"`
	TcStatsMap              *ebpf.Map `ebpf:"tc_stats_map"`
}

func (m *firewall_tcMaps) Close() error {
	return _Firewall_tcClose(
		m.ConnReverseMap,
		m.ConnTrackMap,
		m.DebugCounters,
		m.DebugMap,
		m.LvsDnatMap,
		m.TcEgressBlacklist,
		m.TcEgressBlacklistCount,
		m.TcEgressWhitelist,
		m.TcEgressWhitelistCount,
		m.TcIngressBlacklist,
		m.TcIngressBlacklistCount,
		m.TcIngressWhitelist,
		m.TcIngressWhitelistCount,
		m.TcStatsMap,
	)
}

// firewall_tcVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadFirewall_tcObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewall_tcVariables struct {
}

// firewall_tcPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFirewall_tcObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewall_tcPrograms struct {
	TcEgressFilter  *ebpf.Program `ebpf:"tc_egress_filter"`
	TcIngressFilter *ebpf.Program `ebpf:"tc_ingress_filter"`
}

func (p *firewall_tcPrograms) Close() error {
	return _Firewall_tcClose(
		p.TcEgressFilter,
		p.TcIngressFilter,
	)
}

func _Firewall_tcClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed firewall_tc_bpfeb.o
var _Firewall_tcBytes []byte
