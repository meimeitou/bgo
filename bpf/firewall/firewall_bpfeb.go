// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package firewall

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type firewallFwRule struct {
	_        structs.HostLayout
	IpStart  uint32
	IpEnd    uint32
	Port     uint16
	Protocol uint8
	Action   uint8
}

type firewallFwStats struct {
	_              structs.HostLayout
	TotalPackets   uint64
	AllowedPackets uint64
	BlockedPackets uint64
}

type firewallRateLimitConfig struct {
	_        structs.HostLayout
	PpsLimit uint64
	BpsLimit uint64
	Enabled  uint8
	Padding  [7]uint8
}

type firewallRateLimitState struct {
	_             structs.HostLayout
	LastUpdateNs  uint64
	TokensPackets uint64
	TokensBytes   uint64
}

type firewallRateLimitStats struct {
	_              structs.HostLayout
	DroppedPackets uint64
	DroppedBytes   uint64
	PassedPackets  uint64
	PassedBytes    uint64
}

// loadFirewall returns the embedded CollectionSpec for firewall.
func loadFirewall() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FirewallBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load firewall: %w", err)
	}

	return spec, err
}

// loadFirewallObjects loads firewall and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*firewallObjects
//	*firewallPrograms
//	*firewallMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFirewallObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFirewall()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// firewallSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewallSpecs struct {
	firewallProgramSpecs
	firewallMapSpecs
	firewallVariableSpecs
}

// firewallProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewallProgramSpecs struct {
	XdpFirewallWithLvs *ebpf.ProgramSpec `ebpf:"xdp_firewall_with_lvs"`
}

// firewallMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewallMapSpecs struct {
	BlacklistMap       *ebpf.MapSpec `ebpf:"blacklist_map"`
	ConfigMap          *ebpf.MapSpec `ebpf:"config_map"`
	RateLimitConfigMap *ebpf.MapSpec `ebpf:"rate_limit_config_map"`
	RateLimitStateMap  *ebpf.MapSpec `ebpf:"rate_limit_state_map"`
	RateLimitStatsMap  *ebpf.MapSpec `ebpf:"rate_limit_stats_map"`
	StatsMap           *ebpf.MapSpec `ebpf:"stats_map"`
	WhitelistMap       *ebpf.MapSpec `ebpf:"whitelist_map"`
}

// firewallVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type firewallVariableSpecs struct {
}

// firewallObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewallObjects struct {
	firewallPrograms
	firewallMaps
	firewallVariables
}

func (o *firewallObjects) Close() error {
	return _FirewallClose(
		&o.firewallPrograms,
		&o.firewallMaps,
	)
}

// firewallMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewallMaps struct {
	BlacklistMap       *ebpf.Map `ebpf:"blacklist_map"`
	ConfigMap          *ebpf.Map `ebpf:"config_map"`
	RateLimitConfigMap *ebpf.Map `ebpf:"rate_limit_config_map"`
	RateLimitStateMap  *ebpf.Map `ebpf:"rate_limit_state_map"`
	RateLimitStatsMap  *ebpf.Map `ebpf:"rate_limit_stats_map"`
	StatsMap           *ebpf.Map `ebpf:"stats_map"`
	WhitelistMap       *ebpf.Map `ebpf:"whitelist_map"`
}

func (m *firewallMaps) Close() error {
	return _FirewallClose(
		m.BlacklistMap,
		m.ConfigMap,
		m.RateLimitConfigMap,
		m.RateLimitStateMap,
		m.RateLimitStatsMap,
		m.StatsMap,
		m.WhitelistMap,
	)
}

// firewallVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewallVariables struct {
}

// firewallPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type firewallPrograms struct {
	XdpFirewallWithLvs *ebpf.Program `ebpf:"xdp_firewall_with_lvs"`
}

func (p *firewallPrograms) Close() error {
	return _FirewallClose(
		p.XdpFirewallWithLvs,
	)
}

func _FirewallClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed firewall_bpfeb.o
var _FirewallBytes []byte
