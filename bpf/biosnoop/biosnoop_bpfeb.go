// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package biosnoop

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type biosnoopHashKey struct {
	_      structs.HostLayout
	Dev    uint32
	Rwflag uint32
	Sector uint64
}

type biosnoopStartReqT struct {
	_       structs.HostLayout
	Ts      uint64
	DataLen uint64
}

type biosnoopValT struct {
	_    structs.HostLayout
	Ts   uint64
	Pid  uint32
	Name [16]int8
	_    [4]byte
}

// loadBiosnoop returns the embedded CollectionSpec for biosnoop.
func loadBiosnoop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BiosnoopBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load biosnoop: %w", err)
	}

	return spec, err
}

// loadBiosnoopObjects loads biosnoop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*biosnoopObjects
//	*biosnoopPrograms
//	*biosnoopMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBiosnoopObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBiosnoop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// biosnoopSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopSpecs struct {
	biosnoopProgramSpecs
	biosnoopMapSpecs
	biosnoopVariableSpecs
}

// biosnoopProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopProgramSpecs struct {
	TraceBlockRqComplete *ebpf.ProgramSpec `ebpf:"trace_block_rq_complete"`
	TraceBlockRqIssue    *ebpf.ProgramSpec `ebpf:"trace_block_rq_issue"`
}

// biosnoopMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopMapSpecs struct {
	Events    *ebpf.MapSpec `ebpf:"events"`
	Infobyreq *ebpf.MapSpec `ebpf:"infobyreq"`
	Start     *ebpf.MapSpec `ebpf:"start"`
}

// biosnoopVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopVariableSpecs struct {
}

// biosnoopObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopObjects struct {
	biosnoopPrograms
	biosnoopMaps
	biosnoopVariables
}

func (o *biosnoopObjects) Close() error {
	return _BiosnoopClose(
		&o.biosnoopPrograms,
		&o.biosnoopMaps,
	)
}

// biosnoopMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopMaps struct {
	Events    *ebpf.Map `ebpf:"events"`
	Infobyreq *ebpf.Map `ebpf:"infobyreq"`
	Start     *ebpf.Map `ebpf:"start"`
}

func (m *biosnoopMaps) Close() error {
	return _BiosnoopClose(
		m.Events,
		m.Infobyreq,
		m.Start,
	)
}

// biosnoopVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopVariables struct {
}

// biosnoopPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopPrograms struct {
	TraceBlockRqComplete *ebpf.Program `ebpf:"trace_block_rq_complete"`
	TraceBlockRqIssue    *ebpf.Program `ebpf:"trace_block_rq_issue"`
}

func (p *biosnoopPrograms) Close() error {
	return _BiosnoopClose(
		p.TraceBlockRqComplete,
		p.TraceBlockRqIssue,
	)
}

func _BiosnoopClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed biosnoop_bpfeb.o
var _BiosnoopBytes []byte
